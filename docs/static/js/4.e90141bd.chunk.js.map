{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/hooks/useInput.js","components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","useInput","validate","useState","setValue","isTouched","setIsTouched","inputValid","hasError","isValid","reset","onChangeInputHandler","event","target","onBlurInputHandler","module","exports","Card","props","className","classes","card","children","QuoteForm","isEntering","setIsEntering","trim","authorValue","authorIsValid","authorHasError","authorOnChange","authorOnBlur","textValue","textIsValid","textHasError","textOnChange","textOnBlur","formIsValid","when","message","location","onFocus","form","onSubmit","preventDefault","onAddQuote","author","text","Swal","fire","isLoading","loading","LoadingSpinner","control","htmlFor","id","type","onBlur","onChange","rows","style","resize","actions","onClick","NewQuote","dispatch","useDispatch","history","useHistory","quote","quoteActions","addQuote"],"mappings":"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","file":"static/js/4.e90141bd.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState } from \"react\";\n\nconst useInput = (validate) => {\n  const [value, setValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const inputValid = validate(value);\n  const hasError = !inputValid && isTouched;\n\n  function onBlurInputHandler() {\n    setIsTouched(true);\n  }\n\n  function onChangeInputHandler(event) {\n    setValue(event.target.value);\n  }\n\n  function reset() {\n    setValue(\"\");\n  }\n\n  return {\n    value,\n    hasError,\n    isValid: inputValid,\n    reset,\n    onChangeInputHandler,\n    onBlurInputHandler,\n  };\n};\n\nexport default useInput;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3fv8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3V-44\",\"loading\":\"QuoteForm_loading__3Yco7\",\"control\":\"QuoteForm_control__1mdE9\",\"actions\":\"QuoteForm_actions__3azpZ\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useState } from \"react\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\nimport useInput from \"../hooks/useInput\";\nimport Swal from \"sweetalert2\";\n\nimport { Prompt } from \"react-router-dom\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n\n  const {\n    value: authorValue,\n    isValid: authorIsValid,\n    hasError: authorHasError,\n    onChangeInputHandler: authorOnChange,\n    onBlurInputHandler: authorOnBlur,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: textValue,\n    isValid: textIsValid,\n    hasError: textHasError,\n    onChangeInputHandler: textOnChange,\n    onBlurInputHandler: textOnBlur,\n  } = useInput((value) => value.trim() !== \"\");\n\n  let formIsValid = false;\n\n  if (authorIsValid && textIsValid) {\n    formIsValid = true;\n  }\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    if (isEntering) return;\n\n    if (!formIsValid) {\n      textOnBlur();\n      authorOnBlur();\n      Swal.fire(\n        \"Incompleted Information\",\n        \"Your information is incompleted, please complete the form.\",\n        \"warning\"\n      );\n      return;\n    }\n\n    props.onAddQuote({ author: authorValue, text: textValue });\n  }\n\n  function finishEnteringHandler() {\n    setIsEntering(false);\n  }\n\n  function formFocusedHandler() {\n    setIsEntering(true);\n  }\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure to leave from this page?, You will lost all information entered\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div\n            className={`${classes.control} ${authorHasError ? \"invalid\" : \"\"}`}\n          >\n            <label htmlFor=\"author\">Author</label>\n            <input\n              id=\"author\"\n              type=\"text\"\n              value={authorValue}\n              onBlur={authorOnBlur}\n              onChange={authorOnChange}\n            />\n            {authorHasError && <p>Author name is not valid*</p>}\n          </div>\n\n          <div\n            className={`${classes.control} ${textHasError ? \"invalid\" : \"\"}`}\n          >\n            <label htmlFor=\"text\">Text</label>\n            <textarea\n              id=\"text\"\n              rows=\"5\"\n              value={textValue}\n              onChange={textOnChange}\n              onBlur={textOnBlur}\n              style={{ resize: \"none\" }}\n            />\n            {textHasError && <p>Text is not valid*</p>}\n          </div>\n\n          <div className={classes.actions}>\n            <button\n              onClick={finishEnteringHandler}\n              type=\"submit\"\n              className=\"btn\"\n            >\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { Fragment } from \"react\";\n\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport { quoteActions } from \"../store/quote\";\n\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport Swal from \"sweetalert2\";\n\nconst NewQuote = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const submitHandler = (quote) => {\n    dispatch(quoteActions.addQuote(quote));\n\n    Swal.fire(\"Succes\", \"Your Quote has created!\", \"success\");\n    history.push(\"/quotes\");\n  };\n\n  return (\n    <Fragment>\n      <QuoteForm onAddQuote={submitHandler} />\n    </Fragment>\n  );\n};\n\nexport default NewQuote;\n"],"sourceRoot":""}